import jsPDF from 'jspdf';

interface ContractData {
  title: string;
  type: string;
  content: string;
  prompt?: string;
}

export const generateContractPDF = (contract: ContractData): void => {
  const pdf = new jsPDF('p', 'mm', 'a4');
  const margin = 25;
  const contentWidth = pdf.internal.pageSize.getWidth() - margin * 2;
  let yPosition = margin;

  // Add header with company info
  const addHeader = () => {
    pdf.setFontSize(24);
    pdf.setFont('helvetica', 'bold');
    pdf.setTextColor(44, 62, 80); // Dark blue-gray
    pdf.text('CONTRACT AGREEMENT', pdf.internal.pageSize.getWidth() / 2, yPosition, {
      align: 'center',
    });
    yPosition += 15;

    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'normal');
    pdf.setTextColor(52, 73, 94); // Lighter blue-gray
    pdf.text('Generated by ContractGPT', pdf.internal.pageSize.getWidth() / 2, yPosition, {
      align: 'center',
    });
    yPosition += 20;

    // Add a decorative line
    pdf.setDrawColor(52, 73, 94);
    pdf.setLineWidth(0.5);
    pdf.line(margin, yPosition, pdf.internal.pageSize.getWidth() - margin, yPosition);
    yPosition += 15;
  };

  const addText = (
    text: string,
    fontSize: number = 11,
    isBold: boolean = false,
    color: number[] = [44, 62, 80]
  ) => {
    pdf.setFontSize(fontSize);
    pdf.setFont('helvetica', isBold ? 'bold' : 'normal');
    pdf.setTextColor(color[0], color[1], color[2]);

    const lines = pdf.splitTextToSize(text, contentWidth);
    if (yPosition + lines.length * (fontSize * 0.4) > pdf.internal.pageSize.getHeight() - margin) {
      pdf.addPage();
      yPosition = margin;
    }

    pdf.text(lines, margin, yPosition);
    yPosition += lines.length * (fontSize * 0.4) + 3;
  };

  const addHeading = (text: string, fontSize: number = 16, level: number = 1) => {
    // Add spacing before headings
    if (level === 1) yPosition += 8;
    if (level === 2) yPosition += 6;
    if (level === 3) yPosition += 4;

    addText(text, fontSize, true, level === 1 ? [41, 128, 185] : [52, 73, 94]); // Blue for main headings

    // Add underline for main headings
    if (level === 1) {
      const textWidth = pdf.getTextWidth(text);
      pdf.setDrawColor(41, 128, 185);
      pdf.setLineWidth(0.3);
      pdf.line(margin, yPosition - 2, margin + textWidth, yPosition - 2);
    }

    yPosition += 6;
  };

  const addListItem = (text: string) => {
    const cleanText = text.replace(/\*\*([^*]+)\*\*/g, '$1');
    const bulletPoint = 'â€¢ ';
    const bulletWidth = pdf.getTextWidth(bulletPoint);

    pdf.setFontSize(11);
    pdf.setFont('helvetica', 'normal');
    pdf.setTextColor(44, 62, 80);

    // Add bullet point
    pdf.text(bulletPoint, margin, yPosition);

    // Add text with proper indentation
    const textLines = pdf.splitTextToSize(cleanText, contentWidth - bulletWidth - 5);
    if (yPosition + textLines.length * 4.4 > pdf.internal.pageSize.getHeight() - margin) {
      pdf.addPage();
      yPosition = margin;
    }

    pdf.text(textLines, margin + bulletWidth + 5, yPosition);
    yPosition += textLines.length * 4.4 + 2;
  };

  const addSection = (title: string, content: string) => {
    addHeading(title, 14, 2);
    addText(content);
    yPosition += 8;
  };

  // Start with header
  addHeader();

  // Title
  addHeading(contract.title, 18, 1);

  // Process content with better formatting
  const lines = contract.content.split('\n');
  let currentSection = '';

  for (const line of lines) {
    const trimmed = line.trim();
    if (!trimmed) continue;

    if (trimmed.startsWith('# ')) {
      addHeading(trimmed.substring(2), 16, 1);
    } else if (trimmed.startsWith('## ')) {
      addHeading(trimmed.substring(3), 14, 2);
    } else if (trimmed.startsWith('### ')) {
      addHeading(trimmed.substring(4), 12, 3);
    } else if (trimmed.startsWith('- ')) {
      addListItem(trimmed.substring(2));
    } else if (trimmed.includes('**')) {
      const cleanLine = trimmed.replace(/\*\*([^*]+)\*\*/g, '$1');
      addText(cleanLine, 11, true);
    } else {
      addText(trimmed);
    }
  }

  // Add signature section with better formatting
  yPosition += 15;
  addHeading('Signatures', 14, 2);

  const signatureFields = [
    { label: 'Client Signature', name: 'Client Name' },
    { label: 'Service Provider Signature', name: 'Service Provider Name' },
    { label: 'Date', name: 'Date' },
  ];

  signatureFields.forEach((field, index) => {
    yPosition += 8;

    // Field label
    addText(field.label, 11, true, [52, 73, 94]);

    // Signature line
    const lineWidth = 80;
    const lineX = margin + 20;
    pdf.setDrawColor(52, 73, 94);
    pdf.setLineWidth(0.5);
    pdf.line(lineX, yPosition + 2, lineX + lineWidth, yPosition + 2);

    // Name placeholder
    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'italic');
    pdf.setTextColor(149, 165, 166);
    pdf.text(field.name, lineX + 5, yPosition + 6);

    yPosition += 15;
  });

  // Add footer
  const pageCount = pdf.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    pdf.setPage(i);
    pdf.setFontSize(8);
    pdf.setFont('helvetica', 'normal');
    pdf.setTextColor(149, 165, 166);
    pdf.text(
      `Page ${i} of ${pageCount}`,
      pdf.internal.pageSize.getWidth() / 2,
      pdf.internal.pageSize.getHeight() - 10,
      { align: 'center' }
    );
  }

  pdf.save(`${contract.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_contract.pdf`);
};
